css html (业务+样式) 响应式，弹性布局，固定布局
js (业务)
基础语法 编码能力 架构能力 业务能力

面向过程和面向对象孰优孰劣
js需要类编程吗
js是基于原型设计的语言
为什么使用js，js的动态性
每一门语言都有自己的特点

js编码规范

数据结构和算法很重要
看书是必要的：系统，权威，专业

效率：工具，插件，兼容

typescript使用场景
eslint
不是任何技术，任何工具都需要使用，需要结合具体的使用场景分析，否则有可能适得其反，只有适合的才是好的

不要马上写代码，先想好再写

css响应式布局
flex与媒体查询
rm和rem
最新的css3 vw和vh
相对单位


vue项目架构
可重复使用的  组件
pages
  view 页面
  component 页面拆分的组件 不可重复使用


设计模式
发布-订阅模式
策略模式
....
开闭原则

vue通信的几种方式
eventbus
inject
prop
v-model
vuex
watch

弄清楚需求在写代码，新建文档整理需求（需求文档需要提炼）,自己之前的观念就是只要遵守设计稿，还原设计稿就可以了，开始做业务之后，明白自己需要分析需求，我理解的需求或者说前端需要分析的需求（代码层面上），就是某些功能在大多数实践中的的应用场景及其实现，可能设计稿是这样画的，但是我们需要自己思考分析如何实现，这样实现是否合理等

要多交流，无论是在网络社区（github，掘金，gitter，qq群），还是和同事，业务代码可能技术单一，重复性多，闷头写代码进步有限，技术发展块，多看优秀的开源代码，学习项目结构，代码组织结构，简洁的写法等



业务代码的分享

学习路径（方法）的分享

​	看书，看好书

​	看github开源项目，自己要调试，看issue，尝试解决issue

​	做笔记，自己多实验

​	多请教

​	读规范

工具的使用（提高效率）

​	快捷键，插件（vscode，chrome，在线工具）

​	平时多收集，有了工具也要多练，工具要使用多了才是自己的，才能真正提高效率，熟能生巧

对技术的思考

​	技术发展很快，百花齐放，要分析利弊，选择合适自己的，而不是看到什么新技术都要用

​	要注重技术的深度发展，专一门技术好过泛滥的学习，但也不是说完全不学其他的，了解相关技术是必须的，否则工作就很难完成

​	认识到，算法和数据结构是基础，语言只是工具（不是说语言不重要，只是说不要想着那么多语言，我必须全学一遍，没必要，其实序言都是相通的，选一门自己喜欢的语言即可，学通一门其他的也很好学）

​	发现自己专业的前景和未来，保持热情，乐观的态度，

​	理论基础很重要，想要在编程的世界里通行，一定的计算机基础是必须的，就像开车一样，想要正常的开车上路，你必须要学如何启动车辆，如何换挡，如何打方向盘，了解交通规则等，编程的世界也是一样，无论你是前端后端，了解cpu如何执行程序，内存如何存储数据，操作系统如何调度进程，线程，如何分配资源等，磁盘分区，计算机网络（tcp/ip，http），编译原理，密码学（非对称加密，对称加密，摘要算法，数字签名，表单加密，https），编码转码（base64，url编码，乱码问题，utf-8，unicode，ascii，数据流）这些部分编程语言，部分领域，是我们在编程世界通行的基本能力



## 对vue的理解

目前我所做的项目基本都是vue技术栈的项目，jquery就不说了，jquery本质是一个js工具库，比较接近原生开发，小程序开发和vue思想和vue基本一致

vue源码：vue是一个渐进式框架，vue只包含内核代码，周边生态还算比较丰富，通过各种扩展可以增强vue的能力

内核代码说大不大（12000多行，vue2.0+，vue3不知道，但是vue3的代码比vue好看，改进了架构，更加清晰），说小不小，不要单纯的去看内核代码，带着目的，问题去看更有效果

能学到更多的高级知识，要坚持，戒骄戒躁，看源码写能更好的理解，而不是死机硬背api，写法等，清晰知道自己项目的运行流程

vue数据驱动，实际上就是通过监听数据，注入依赖，数据变化拦截，更新dom，不再需要开发人员手动更新dom，更多的精力转移到具体的业务逻辑上



