1.创建空文件
创建空文件方法很多，可以5261用任何在命令行执行后不会显示信息的命令加重定向4102，比如cd . > a.txt

%0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*为命令行传递给批处理的参数
%0 批处理文件本身，包括完整的路径和扩展名
%1 第一个参数
%9 第九个参数


2.文本解析
delims  解析
tokens  获取
delims负责切分字符串，而tokens负责提取字符串。如果把字符串当作蛋糕，Delims像刀子，用来切蛋糕，tokens像叉子，用来取切好的蛋糕


3.设置环境变量
set variable_name=variable_value

4.使用环境变量
%v%,用两个百分号括起来

5.查看环境变量
set

6.windows 下的grep
set | findstr Path


%~dp0:表示当前bat文件的绝对路径
%cd%:表示当前的工作目录，在哪里执行工作目录就在哪里


for语句:
for /f （delims、tokens、skip、eol、userbackq、变量延迟） 解析文本
for /r （递归遍历）
for /d （遍历目录）
for /l （计数循环）

延迟变量
setlocal EnableDelayedExpansion    //开启延迟环境变量
setlocal DisableDelayedExpansion   //关闭延迟环境变量
先来说说变量延迟扩展吧。当然，放狗一搜，就能看到满天飞的关于变量延迟扩展的文章，所以，我这里就简单介绍一下。先来看一段批处理：
set str=test
if %str%==test (
    set str=another test
    echo %str%
)
上面的代码段极其简单，给str赋值，判断其值是否为test，如果是，重新赋值为another test，再显示str的值。
作为正常人的思维，这里显示的肯定是another test了，但其实不是，其显示的仍然是test，这是为什么？因为：windows在解释执行此代码段时，
在遇到if语句后的括号后，只把它当一条语句处理而不是两条语句，所以，在第二条语句中的%str%会被替换成它目前的值test，上面的代码相当于下面的代码的效果：
set str=test
if %str%==test (
    set str=another test
    echo test    ::注意这里
)
所以，输出自然是test了。
这样编程的灵活性就大大降低了，于是，M$就想了一个workground的方法，那就是变量延迟，很简单，看如下代码：
@echo off
setlocal enabledelayedexpansion    ::注意这里
set str=test
if %str%==test (
    set str=another test
    echo !str!      ::注意这里
    echo %str%  ::区别
)
现在会输出什么呢？试一下就知道，第一行输出another test，第二行输出test。
现在解释一下，setlocal enabledelayedexpansion用于开启变量延迟，这是告诉解释器，在遇到复合语句的时候，
不要将其作为一条语句同时处理，而仍然一条一条地去解释。但是这时必须用!str!来引用变量，如果仍然用%str%引用是不起作用的。
好了，变量延迟扩展解释完了，至少这就是我知道的变量延迟扩展。

%errorlevel%:
它的作用是判断前一条命令的错误返回值


>nul 是屏蔽操作成功显示的信息，但是出错还是会显示(即1>nul)
2>nul 是屏蔽操作失败显示的信息，如果成功依旧显示。
>nul 2>nul 就是正确的错误的一起屏蔽掉，就啥也不显示了。