/*
***正则基础
* 1.字符使用正则
* str.search(regexp)
* 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置
* str.replace(regexp)
* str.matchAll(regexp)
* 找出str中所有匹配的项，返回一个可迭代对象
* str.match(regexp)
* 找出str中所有匹配的项，返回一个结果数组
* 2.正则对象
* RegExp.test(str)
* 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。
* RegExp.exec(str)
* 该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。
* 此方法可以实现逐步匹配，也就是执行一次只返回最先找到的匹配项，并记录位置，下一次在执行此方法就不会重复匹配之前已经匹配过的
 */


/*
***给一个连字符串例如：get-element-by-id转化成驼峰形式。
 */
const {log} = console;
function RegFind(str,rx) {
    return str.match(rx);
}

let rx1=/-/g;
log(RegFind('get-element-by-id',rx1));

/*
**匹配二进制数据,也就是0和1
 */
let rx2=/(0|1)/g;
log(RegFind('265610123971065',rx2));
for (let r of '265610123971065'.matchAll(rx2)){
    log(r);
}

/*
*非零的十进制数字 (有至少一位数字, 但是不能以0开头)
 */
let rx3 = /[1-9]+/g;
log(RegFind('0123566',rx3));

/*
***判断输入的数字是否是一年中的12个月份
 */

let rx4 = /^(0?[1-9]|1[0-2])$/g;
log(RegFind('11',rx4));

/*
***匹配一个最长不超过13个字符的字符串，只能包含数字
 */

let rx5 = /^(\d{1,13})$/g;

log(RegFind('2326544',rx5));


/*
***判断给定的字符串是否是一个固话号码
* 区号-号码
* 区号：3-4位
* 号码：7-8位
 */

let rx6 = /^(\d{3,4}-\d{7,8})$/g;

log(RegFind('021-2326544',rx6));


/*
***匹配ip地址 ipv4
* 0.0.0.0-255.255.255.255
 */

let rx7 = /^((0|1[1-9]?[1-9]?|2[0-5]?[0-5]?)\.){3}(0|1[1-9]?[1-9]?|2[0-5]?[0-5]?)$/g;

log(RegFind('212.23.0.24',rx7));

/*
***匹配用尖括号括起来的以a开头的字符串
*
 */
let rx8 = /<a(\S|\s)+?>/g;

log(RegFind('dasda<aabsd  *** dadda>dddd',rx8));



/*
***分割数字每三个以一个逗号划分
*
 */
let rx9 = /[0-9]{1,3}/g;

log(RegFind('1594613268',rx9).join(','));


/*
***判断字符串是否包含数字
*
 */
let rx10 = /[0-9]/g;
console.log(rx10.test('dajdsajd33dadj3dsa9sdaj'));

/*
***判断一个字符串是否是电话号码
*一般电话号码：11位，不以0开头
 */
let rx11 = /^[1-9][0-9]{10}$/g;
log(RegFind('15946132689',rx11));



/*
***判断是否符合USD格式
* 标准的美元书写格式：
* 标准的：USD20.00
* 简写成：＄20.00
 */
let rx12 = /^(USD|\$)[0-9]+\.?[0-9]{0,2}$/g;
log(RegFind('USD1024.12',rx12));

let rx121 = /^(USD)(\d{1,3},)(\d{3},)+(\d{3})\.\d{0,2}$/g;
log(RegFind('USD21,211,102,423,423.00',rx121));


/*
***js实现千分位隔符
*
 */
let rx14 = /^(\d+\.\d{3})(\d+)$/g;

log(rx14.exec('0.1236495665').join(","));


/*
***获取url参数
*
 */
let rx15 = /\?(.+?=".+?"&?)+/g;

log(RegFind('https://www.haiblog.cn?keyword="javascript"&author="wone"',rx15));


/*
***验证邮箱
*xxxx@xxx.com
*/
let rx16 = /\S+?@\S+?.com/g;

log(RegFind("weidehai@qq.com",rx16));

/*
**验证身份证
* 18位。末位可能为x
* 7-15位为出生年月日
* 出生时间不大于当前时间1910-2020，
* 出生月份不大于12，出生日期不大于32
 */

let rx17 = /\d{6}(19[1-9][0-9](0[1-9]|10|11|12)(0[1-9]|1[0-9]|2[0-9]|30|31)|20[0-1][0-9](0[1-9]|10|11|12)(0[1-9]|1[0-9]|2[0-9]|30|31)|2020(0[1-3](0[1-9]|1[0-9]|2[0-9]|30|31)|04(0[1-5])))\d{3}(\d|X)/g;

log(RegFind("46002520050404421X",rx17));


/*
**匹配汉字
 */
let rx18 = /\W+/g;

log(RegFind("www撒旦撒s微dd微的s扩大sss",rx18));



/*
**除去首尾的'/'
 */
let rx19 = /(^\/|\/$)/g;

log(RegFind("/ddddd/",rx19));
//log('/dddddd/'.replace(rx19,''));


/*
***判断日期格式是否符合 '2017-05-11'的形式，简单判断，只判断格式
 */
let rx20 = /\d{4}-\d{2}-\d{2}/g;

log(RegFind("2017-08-08",rx20));


/*
***判断日期格式是否符合 '2017-05-11'的形式，严格判断（比较复杂）
 */

let rx21 = /\d{4}-(0[1-9]|10|11|12)-(0[1-9]|1\d|2\d|30|31)/g;

log(RegFind("2017-10-31",rx21));

/*
*十六进制颜色正则
**0x开头
* 0-9 a-f不区分大小写
 */
let rx22 = /^(0x)(\d|[a-f]){6}$/ig;

log(RegFind("0x0aFfff",rx22));



/*
车牌号正则
*粤|琼|豫|川|  A|B|C  \w\d
 */
let rx23 = /^\W[A-F](\w|\d){5}$/ig;

log(RegFind("琼A1234L",rx23));

/*
过滤HTML标签
 */
let rx24 = /<(\S+)(\s|\S)+?>(\s|\S)*?<\/\1>/ig;

log(RegFind("dad<a href='https://www.haiblog.cn'>haiblog</a><div class='wrapper' id='main'><ul><li>2</li><li>2</li></ul></div>dada",rx24));

/*
密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符
 */
let rx25 = /.*(?=.{6,})(?=.*[A-Z]{1,})(?=.*[a-z]{1,})(?=.*\d)(?=.*[!@#$%^&*\(\)_+\-=?\/;:'"<>\.~\[\]\{\}]).*/g;

log(RegFind("weI1.2",rx25));

/*
*判断一个输入是否是浮点数
 */
let rx26 = /^\d*?\.\d+$/ig;

log(RegFind(".0223",rx26));

/*
*判断一个输入是否是URL
 */

let rx27 = /(https:\/\/|http:\/\/)*(www\..*\.(cn|com|gov)$|.*\.(cn|com|gov)$)/ig;

log(RegFind("haiblog.gov",rx27));

//^号的用法
//取反：直接出现在中括号中[^\d],[(^\d)],后者不是
//若是[^(\d)],这样呢？

//获取url查询参数
new RegExp("(^|&)" + param + "=([^&]*)(&|$)")
(^|&):表示匹配一个字符串的开头，^后面不跟任何东西，表示从第一个字符开始匹配，开头可以是任意字符，或者匹配一个&字符
(&|$)：表示匹配一个字符串的结尾，$后面不跟任何东西，表示匹配到字符的结尾，结尾可以是任意字符，或者匹配一个&字符

//匹配浮点数，可带符号
/^[-|+]?\d+(\.\d+)?$/
^[-|+]?：以正负号开头，？表示可以没有
