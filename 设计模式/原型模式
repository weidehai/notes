1、原型模式简介
原型模式使用原型实例指定创建对象的种类，并且通过拷贝原型对象创建新的对象。

    Prototype模式提供了一个通过已存在对象进行新对象创建的接口（clone）， clone()实现和具体的语言相关，在C++中通过拷贝构造函数实现。

    原型模式实际上就是从一个对象再创建另外一个可定制的对象，而且不需要知道任何创建的细节。在初始化的信息不发生变化的情况下，克隆是最好的办法，既隐藏了对象创建的细节，又大大提高了性能。因为如果不用clone，每次new都需要执行一次构造函数，如果构造函数的执行时间很长，那么多次的执行初始化操作就太低效了。

原型模式实现clone接口的时候必须使用深拷贝。

原型模式重点在从自身赋值自己创建新的类对象，隐藏创建的细节。
2、原型模式角色
    抽象原型（Prototype）角色：规定了具体原型对象必须实现的接口（如果要提供深拷贝，则必须具有实现clone的规定）

    具体原型（ConcretePrototype）：从抽象原型派生而来，是客户程序使用的对象，即被复制的对象，需要实现抽象原型角色所要求的接口。

    客户（Client）角色：使用原型对象的客户程序
3、原型模式优缺点
优点：

 A、原型模式对客户隐藏了具体的产品类

    B、运行时刻增加和删除产品： 原型模式允许只通过客户注册原型实例就可以将一个新的具体产品类并入系统。

    C、改变值以指定新对象： 高度动态的系统允许通过对象复合定义新的行为。如通过为一个对象变量指定值并且不定义新的类。通过实例化已有类并且将实例注册为客户对象的原型，就可以有效定义新类别的对象。客户可以将职责代理给原型，从而表现出新的行为。

    D、改变结构以指定新对象：许多应用由部件和子部件来创建对象。
    E、减少子类的构造，Prototype模式克隆一个原型而不是请求一个工厂方法去产生一个新的对象。

    F、用类动态配置应用 一些运行时刻环境允许动态将类装载到应用中。

 G、使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。

 H、使用原型模式的另一个好处是简化对象的创建，使得创建对象很简单。

    缺点：

    原型模式的主要缺陷是每一个抽象原型Prototype的子类都必须实现clone操作，实现clone函数可能会很困难。当所考虑的类已经存在时就难以新增clone操作，当内部包括一些不支持拷贝或有循环引用的对象时，实现克隆可能也会很困难的。

4、原型模式使用场景
    原型模式的主要思想是基于现有的对象克隆一个新的对象出来，一般是由对象的内部提供克隆的方法，通过clone方法返回一个对象的副本。

    原型模式使用场景：

    A、当一个系统应该独立于它的产品创建、构成和表示时，要使用原型模式

    B、当要实例化的类是在运行时刻指定时，如通过动态装载

    C、为了避免创建一个与产品类层次平行的工厂类层次时

    D、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆原型可能比每次用合适的状态手工实例化原型类更方便一些。